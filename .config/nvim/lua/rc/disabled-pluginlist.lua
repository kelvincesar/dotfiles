-- ==============================================================
--           Disable                                          {{{
-- ==============================================================
-- cSpell:disable

-- -> flash.nvim
-- {
-- 	"ggandor/leap.nvim",
-- 	event = "VeryLazy",
-- 	dependencies = {
-- 		"yutkat/leap-word.nvim",
-- 		config = function()
-- 			require("rc/pluginconfig/leap-word")
-- 		end,
-- 	},
-- 	config = function()
-- 		require("rc/pluginconfig/leap")
-- 	end,
-- },
-- {
-- 	"ggandor/leap-ast.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/leap-ast")
-- 	end,
-- },
-- {
-- 	"ggandor/flit.nvim",
-- 	event = "VeryLazy",
-- 	config = function()
-- 		require("rc/pluginconfig/flit")
-- 	end,
-- },
-- do not use
-- { "vigoux/architext.nvim" },
-- {
-- 	"phaazon/hop.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/hop")
-- 	end,
-- },
-- -> leap.nvim
-- {
-- 	"ggandor/lightspeed.nvim",
-- 	event = "VimEnter",
-- 	init = function()
-- 		vim.g.lightspeed_no_default_keymaps = true
-- 	end,
-- 	config = function()
-- 		require("rc/pluginconfig/lightspeed")
-- 	end,
-- },
-- -> "cnshsliu/smp.nvim",
-- { "iamcco/markdown-preview.nvim", ft = { "markdown" }, build = ":call mkdp#util#install()" },
-- -- @Vim script
-- {
-- 	"AndrewRadev/linediff.vim",
-- 	cmd = { "Linediff" },
-- },
-- { "neoclide/jsonc.vim", ft = { "json", "jsonc" } },
-- { "MTDL9/vim-log-highlighting", ft = { "log" } },
-- { "mechatroner/rainbow_csv", ft = { "csv" } },
-- buggy
-- use markdown-preview.nvim
-- if vim.fn.executable('glow') == 1 then
--   use {'npxbr/glow.nvim',
--     ft = {'markdown'},
--     build = ':GlowInstall',
--   }
-- end
-- slow to build
-- use {'euclio/vim-markdown-composer',
--   build = 'cargo build --release'
-- }
-- use {'rhysd/rust-doc.vim',
--   ft = {'rust'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/rust-doc.vim') end
-- }
-- use {'python-mode/python-mode',
--   branch = 'develop',
--   ft = {'python'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/python-mode.vim') end
-- }
-- use {'mgedmin/python-imports.vim',
--   ft = {'python'}
-- }
-- archived
-- { "Pocco81/DAPInstall.nvim", after = { "nvim-dap" } },
-- { "rhysd/committia.vim" },
-- don't work
-- use {'tanvirtin/vgit.nvim'}
-- lua buf too simple
-- use {'windwp/nvim-projectconfig'}
-- {
-- 	"airblade/vim-rooter",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-rooter.vim")
-- 	end,
-- },
-- use {
--   'ldelossa/litee-calltree.nvim',
--   after = {'nvim-lspconfig', 'litee.nvim'},
--   config = function() require('litee.calltree').setup({}) end
-- }
-- use {'ElPiloto/sidekick.nvim'}
-- {
-- 	"stevearc/aerial.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/aerial")
-- 	end,
-- },
-- use {
--   'simrat39/symbols-outline.nvim',
--   event = "VimEnter",
--   config = function() require 'rc/pluginconfig/symbols-outline' end
-- }
-- use {
--   'ldelossa/litee-symboltree.nvim',
--   after = {'nvim-lspconfig', 'litee.nvim'},
--   config = function() require('litee.symboltree').setup({}) end
-- }
-- { "gpanders/editorconfig.nvim", event = "VimEnter" },
-- -> null-ls
-- use {
--   'lukas-reineke/format.nvim',
--   event = "VimEnter",
--   config = function() require 'rc/pluginconfig/format' end
-- }
-- -> null-ls
-- {
-- 	"cappyzawa/trim.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("trim").setup()
-- 	end,
-- },
-- {
-- 	"yutkat/taskrun.nvim",
-- 	after = { "toggleterm.nvim", "nvim-notify" },
-- 	config = function()
-- 		require("rc/pluginconfig/taskrun")
-- 	end,
-- },
-- {
-- 	"pianocomposer321/yabs.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/yabs")
-- 	end,
-- },
-- micmine/jumpwire.nvim
-- { "tpope/vim-apathy", event = "VimEnter" },
-- {
-- 	"kana/vim-altr",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-altr.vim")
-- 	end,
-- },
-- {
-- 	"m4xshen/autoclose.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/autoclose")
-- 	end,
-- },
-- {
-- 	"windwp/nvim-autopairs",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/nvim-autopairs")
-- 	end,
-- },
-- ZhiyuanLck/smart-pairs
-- use {'steelsojka/pears.nvim',
--   after = {'nvim-treesitter'},
--   config = function() require'rc/pluginconfig/pears' end
-- }
-- -> nvim-insx
-- {
-- 	"windwp/nvim-ts-autotag",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/nvim-ts-autotag")
-- 	end,
-- 	dependencies = { { "nvim-treesitter/nvim-treesitter" } },
-- },
-- {
--   'abecodes/tabout.nvim',
--   after = {'nvim-treesitter', 'coc.nvim'},
--   config = function() require 'rc/pluginconfig/tabout' end
-- }
--
-- don't work on rust
-- {
-- 	"TornaxO7/tree-setter",
-- 	after = { "nvim-treesitter" },
-- },
-- use {
--   'yutkat/dps-coding-now.nvim',
--   cond = function() return os.getenv("CODING_NOW_GITHUB_TOKEN") ~= nil end,
--   after = {'denops.vim'}
-- }
-- startup time didn't change much
-- {
-- 	"lewis6991/impatient.nvim",
-- 	config = function()
-- 		require("impatient")
-- 	end,
-- },
-- {
-- 	"tyru/open-browser.vim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/open-browser.vim")
-- 	end,
-- },
-- { "tyru/open-browser-github.vim", after = { "open-browser.vim" } },
-- Furkanzmc/zettelkasten.nvim
-- if vim.fn.executable("zk") == 1 then
-- 	{
-- 		"mickael-menu/zk-nvim",
-- 		event = "VimEnter",
-- 		build = function()
-- 			local dir = vim.fn.stdpath("data") .. "/zk/"
-- 			os.execute("mkdir -p " .. dir)
-- 		end,
-- 		config = function()
-- 			require("rc/pluginconfig/zk-nvim")
-- 		end,
-- 	},
-- end
-- use {'stevearc/gkeep.nvim', event = "VimEnter", build = ':UpdateRemotePlugins'}
-- not use
-- {
-- 	"mrjones2014/legendary.nvim",
-- 	after = { "dressing.nvim", "telescope.nvim" },
-- 	config = function()
-- 		require("rc/pluginconfig/legendary")
-- 	end,
-- },
-- Not much use
-- { "segeljakt/vim-silicon", cmd = { "Silicon" } },
-- use {'chrisbra/vim-autosave'}
-- use {'kassio/neoterm'} -- include repl
-- use {'numToStr/FTerm.nvim'}
-- -> cmp-cmdline
-- wilder did not work
-- use {'VonHeikemen/fine-cmdline.nvim', dependencies = "MunifTanjim/nui.nvim"}
-- -> filer
-- use {'tpope/vim-eunuch'}
-- { "thinca/vim-ambicmd", event = "VimEnter" },
-- { "tyru/vim-altercmd", event = "VimEnter" },
-- https://github.com/neovim/neovim/pull/19419
-- {
-- 	"lewis6991/spellsitter.nvim",
-- 	after = "nvim-treesitter",
-- 	config = function()
-- 		require("rc/pluginconfig/spellsitter")
-- 	end,
-- },
-- Not convenient
-- {
-- 	"zdcthomas/medit",
-- 	event = "VimEnter",
-- 	init = function()
-- 		vim.cmd("source ~/.config/nvim/rc/plugininit/medit.vim")
-- 	end,
-- },
-- {
-- 	"Shatur/neovim-session-manager",
-- 	config = function()
-- 		require("rc/pluginconfig/neovim-session-manager")
-- 	end,
-- },
-- {
-- 	"olimorris/persisted.nvim",
-- 	config = function()
-- 		require("rc/pluginconfig/persisted")
-- 	end,
-- },
-- use lsp
-- if vim.fn.executable("global") == 1 then
-- 	{
-- 		"jsfaint/gen_tags.vim",
-- 		-- event = "VimEnter",
-- 		cmd = { "GenCtags", "GenGTAGS" },
-- 		config = function()
-- 			vim.cmd("source ~/.config/nvim/rc/pluginconfig/gen_tags.vim")
-- 		end,
-- 	},
-- end
-- don't work
-- use {'edluffy/hologram.nvim', config = function() require 'rc/pluginconfig/hologram' end}
-- set diffopt+=internal,algorithm:patience
-- { "chrisbra/vim-diff-enhanced", event = "VimEnter" },
-- -> debugloop/telescope-undo.nvim
-- {
-- 	"simnalamburt/vim-mundo",
-- 	-- event = "VimEnter"
-- 	cmd = { "MundoShow" },
-- },
-- {
-- 	"kevinhwang91/nvim-fundo",
-- 	dependencies = { "kevinhwang91/promise-async", module = { "promise", "async" } },
-- 	event = "VimEnter",
-- 	build = function()
-- 		require("fundo").install()
-- 	end,
-- 	config = function()
-- 		require("fundo").setup()
-- 	end,
-- },
-- use {'mbbill/undotree'} -- -> not maintained recently
-- cool but too slow
-- if not vim.g.vscode then
--   use {'machakann/vim-highlightedundo',
--     config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-highlightedundo.vim') end
--   }
-- end
-- -> do not use eventignore! https://github.com/luukvbaal/stabilize.nvim/commit/718561393f885dbbc9de8ed71089772af0dbbb3f
-- use {
--   'luukvbaal/stabilize.nvim',
--   event = "VimEnter",
--   config = function() require 'rc/pluginconfig/stabilize' end
-- }
-- use {'andymass/vim-tradewinds', event = "WinNew"}
-- {
-- 	"tkmpypy/chowcho.nvim",
-- 	event = "WinNew",
-- 	config = function()
-- 		require("rc/pluginconfig/chowcho")
-- 	end,
-- },
-- use {'dyng/ctrlsf.vim'}
-- { "lambdalisue/reword.vim", event = "VimEnter" },
-- { "haya14busa/vim-metarepeat", event = "VimEnter" },
-- -> AckslD/nvim-anywise-reg.lua
-- {
-- 	"deris/vim-pasta",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-pasta.vim")
-- 	end,
-- },
-- { "yutkat/auto-paste-mode.vim", event = "VimEnter" },
-- { "chikatoike/concealedyank.vim", event = "VimEnter" },
-- use {'zegervdv/nrpattern.nvim',
--   config = function() require'rc/pluginconfig/nrpattern' end
-- }
-- { "deris/vim-rengbang", event = "VimEnter" },
-- {
-- 	"thinca/vim-partedit",
-- 	-- event = "VimEnter",
-- 	cmd = { "Partedit" },
-- },
-- -> treesitter incremental selection
-- {
-- 	"terryma/vim-expand-region",
-- 	event = "VimEnter",
-- 	init = function()
-- 		vim.cmd("source ~/.config/nvim/rc/plugininit/vim-expand-region.vim")
-- 	end,
-- },
-- -> do not use
-- {
-- 	"terryma/vim-multiple-cursors",
-- 	event = "VimEnter",
-- 	init = function()
-- 		vim.cmd("source ~/.config/nvim/rc/plugininit/vim-multiple-cursors.vim")
-- 	end,
-- },
-- {
-- 	"kana/vim-niceblock",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-niceblock.vim")
-- 	end,
-- },
-- use {'mg979/vim-visual-multi'} -- -> mapping infection
-- use {'psliwka/vim-smoothie'} -- slow
-- -> bufferline
-- {
-- 	"Bakudankun/BackAndForward.vim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/BackAndForward.vim")
-- 	end,
-- },
-- -> use snippets
-- { "kana/vim-smartchr", event = "VimEnter" },
-- use {'kana/vim-arpeggio', event = "VimEnter"}
-- use {'tpope/vim-sexp-mappings-for-regular-people', event = "VimEnter"}
-- I didn't use zen-mode much
-- use {'kdav5758/TrueZen.nvim', cmd = {'TZAtaraxis', 'TZMinimalist', 'TZBottom', 'TZTop', 'TZLeft'}}
-- use {'folke/zen-mode.nvim', cmd = {'ZenMode'}}
-- There are Lua plugin. I haven't tried it yet because I'm satisfied with coc.
-- norcalli/nvim-colorizer.lua
-- use {'powerman/vim-plugin-AnsiEsc', event = "VimEnter"}
-- -> use hop
-- mfussenegger/nvim-treehopper
-- {
-- 	"bryall/contextprint.nvim",
-- 	after = { "nvim-treesitter" },
-- 	config = function()
-- 		require("rc/pluginconfig/contextprint")
-- 	end,
-- },
-- Error on :Gina status
-- use {
--   'code-biscuits/nvim-biscuits',
--   after = {'nvim-treesitter', colorscheme},
--   config = function() require 'rc/pluginconfig/nvim-biscuits' end
-- }
-- {
-- 	"nvim-treesitter/playground",
-- 	lazy = false
-- },
-- {
-- 	"nvim-telescope/telescope-project.nvim",
-- 	after = { "telescope.nvim" },
-- 	config = function()
-- 		require("telescope").load_extension("project")
-- 	end,
-- },
-- {
-- 	"nvim-telescope/telescope-vimspector.nvim",
-- 	after = { "telescope.nvim" },
-- 	config = function()
-- 		require("telescope").load_extension("vimspector")
-- 	end,
-- },
-- {
-- 	"nvim-telescope/telescope-ghq.nvim",
-- 	after = { "telescope.nvim" },
-- 	config = function()
-- 		require("telescope").load_extension("ghq")
-- 	end,
-- },
-- {
-- 	"nvim-telescope/telescope-packer.nvim",
-- 	config = function()
-- 		require("telescope").load_extension("packer")
-- 	end,
-- },
-- use {'zxqfl/tabnine-vim'}
-- { "github/copilot.vim", cmd = { "Copilot" } },
-- use {
--   'ray-x/navigator.lua',
--   after = 'mason.nvim',
--   dependencies = {'ray-x/guihua.lua', build = 'cd lua/fzy && make', opt = true},
--   config = function() require 'rc/pluginconfig/navigator' end
-- }
-- use {
--   'onsails/diaglist.nvim',
--   after = 'nvim-lspconfig',
--   config = function() require 'rc/pluginconfig/diaglist' end
-- }
-- -> lspsaa
-- use {
--   'rmagatti/goto-preview',
--   after = 'nvim-lspconfig',
--   config = function() require 'rc/pluginconfig/goto-preview' end
-- }
-- -> lspsaa
-- use {
--   'filipdutescu/renamer.nvim',
--   after = 'nvim-lspconfig',
--   config = function() require 'rc/pluginconfig/renamer' end
-- }
-- -> lspsaa
-- use {
--   'kosayoda/nvim-lightbulb',
--   after = 'nvim-lspconfig',
--   config = function() require 'rc/pluginconfig/nvim-lightbulb' end
-- }
-- use {'nvim-lua/lsp-status.nvim', after = 'nvim-lspconfig'}
-- use {
--   'nvim-lua/lsp_extensions.nvim',
--   after = 'mason.nvim',
--   config = function() require 'rc/pluginconfig/lsp_extensions' end
-- }
-- -> hrsh7th/cmp-nvim-lsp-signature-help, hrsh7th/cmp-nvim-lsp-document-symbol
-- {
-- 	"ray-x/lsp_signature.nvim",
-- 	after = "nvim-lspconfig",
-- 	config = function()
-- 		require("rc/pluginconfig/lsp_signature")
-- 	end,
-- },
-- {
-- 	"tamago324/nlsp-settings.nvim",
-- 	after = { "nvim-lspconfig" },
-- 	config = function()
-- 		require("rc/pluginconfig/nlsp-settings")
-- 	end,
-- },
-- library for litee
-- use {
--   'ldelossa/litee.nvim',
--   after = 'nvim-lspconfig',
--   config = function() require('litee.lib').setup({}) end
-- }
-- use {'ryanoasis/vim-devicons'}
--------------------------------
-- Denops Library
-- use {'vim-denops/denops.vim'}

-- -> lspsaga
-- {
-- 	"SmiteshP/nvim-navic",
-- 	init = function()
-- 		require("rc/pluginconfig/nvim-navic")
-- 	end,
-- },
-- use {'mattn/webapi-vim'}
-- -> formatter
-- @Vim script
-- { "alcesleo/vim-uppercase-sql", event = "VimEnter" },
-- -> prettier and markdown-toc
-- {
-- 	"SidOfc/mkdx",
-- 	ft = { "markdown" },
-- 	init = function()
-- 		vim.cmd("source ~/.config/nvim/rc/plugininit/mkdx.vim")
-- 	end,
-- },
-- {
-- 	"dhruvasagar/vim-table-mode",
-- 	cmd = { "TableModeEnable" },
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-table-mode.vim")
-- 	end,
-- },
--{
--	"aiya000/aho-bakaup.vim",
--	event = "VimEnter",
--	init = function()
--		vim.cmd("source ~/.config/nvim/rc/plugininit/aho-bakaup.vim")
--	end,
--},
-- -> cbochs/portal.nvim
--{
--	"osyo-manga/vim-milfeulle",
--	event = "VimEnter",
--	config = function()
--		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-milfeulle.vim")
--	end,
--},
-- -> chrisgrieser/nvim-various-textobjs
-- {
-- 	"bkad/CamelCaseMotion",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/CamelCaseMotion.vim")
-- 	end,
-- },
-- {
-- 	"justinmk/vim-ipmotion",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-ipmotion.vim")
-- 	end,
-- },
-- -> ziontee113/syntax-tree-surfer
-- {
-- 	"haya14busa/vim-edgemotion",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-edgemotion.vim")
-- 	end,
-- },
-- {
-- 	"machakann/vim-columnmove",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-columnmove.vim")
-- 	end,
-- },
-- -> hek14/symbol-overlay.nvim
-- {
-- 	"t9md/vim-quickhl",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-quickhl.vim")
-- 	end,
-- },
-- Archived
-- {
-- 	"folke/lsp-colors.nvim",
-- },
-- use {'kana/vim-tabpagecd'}
-- use {'taohex/lightline-buffer'}
-- -> lalitmee/browse.nvim
-- use({
-- 	"thinca/vim-ref",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-ref.vim")
-- 	end,
-- })
-- -> rareitems/put_at_end.nvim
-- use({
-- 	"lfilho/cosco.vim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/cosco.vim")
-- 	end,
-- })
-- use({
-- 	"gbprod/yanky.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/yanky")
-- 	end,
-- })
-- use({
-- 	"bfredl/nvim-miniyank",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/nvim-miniyank.vim")
-- 	end,
-- })
-- -> AckslD/nvim-neoclip.lua
-- use({
-- 	"gennaro-tedesco/nvim-peekup",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/nvim-peekup")
-- 	end,
-- })
-- use({
-- 	"machakann/vim-sandwich",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-sandwich.vim")
-- 	end,
-- })
-- -> iswap.nvim
-- use({
-- 	"machakann/vim-swap",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-swap.vim")
-- 	end,
-- })
-- use({ "axlebedev/vim-case-change", event = "VimEnter" })
-- use({
-- 	"mopp/vim-operator-convert-case",
-- 	requires = { { "kana/vim-operator-user", event = "VimEnter" } },
-- 	after = { "vim-operator-user" },
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-operator-convert-case.vim")
-- 	end,
-- })
-- use({
-- 	"johmsalas/text-case.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/text-case")
-- 	end,
-- })
-- use {'osyo-manga/vim-operator-stay-cursor'}
-- use({ "kana/vim-operator-user", event = "VimEnter" })
-- use({
-- 	"kana/vim-operator-replace",
-- 	after = { "vim-operator-user" },
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-operator-replace.vim")
-- 	end,
-- })
-- nvim-treesitter-textobj
-- use({ "kana/vim-textobj-user", event = "VimEnter" })
-- use({ "kana/vim-textobj-line", after = { "vim-textobj-user" } })
-- use({ "kana/vim-textobj-entire", after = { "vim-textobj-user" } })
-- use({ "kana/vim-textobj-function", after = { "vim-textobj-user" } })
-- use({ "reedes/vim-textobj-sentence", after = { "vim-textobj-user" } })
-- use({
-- 	"machakann/vim-textobj-functioncall",
-- 	after = { "vim-textobj-user" },
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-textobj-functioncall.vim")
-- 	end,
-- })
-- vim-swap
-- use({ "sgur/vim-textobj-parameter", after = { "vim-textobj-user" } }) -- -> vim-swap
-- Not much maintenance lately
-- use {'wellle/targets.vim'} -- -> kana/vim-textobj-user

-- do not use
-- 'thinca/vim-textobj-between' -- -> sandwich
-- 'mattn/vim-textobj-url'
-- slow on startup
-- use {'kana/vim-textobj-indent'}
-- use {'haya14busa/vim-textobj-function-syntax'}
-- use {'kana/vim-textobj-datetime'}
-- use {'lucapette/vim-textobj-underscore'}
-- delphinus/cellwidths.nvim
-- use({ "rbtnn/vim-ambiwidth", event = "BufEnter" })
-- -> ModeChanged
-- use({
-- 	"kevinhwang91/nvim-hclipboard",
-- 	after = { "LuaSnip" },
-- 	config = function()
-- 		require("hclipboard").start()
-- 	end,
-- })
-- -> andrewferrier/debugprint.nvim
-- use({
-- 	"sentriz/vim-print-debug",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-print-debug.vim")
-- 	end,
-- })
-- -> williamboman/mason.nvim
-- use({
-- 	"williamboman/nvim-lsp-installer",
-- 	after = { "nvim-lspconfig", "cmp-nvim-lsp", "nlsp-settings.nvim" },
-- 	config = function()
-- 		require("rc/pluginconfig/nvim-lsp-installer")
-- 	end,
-- })
-- -> rapan931/lasterisk.nvim
-- use({
-- 	"haya14busa/vim-asterisk",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-asterisk.vim")
-- 	end,
-- })
-- -> RRethy/nvim-align
-- use({
-- 	"junegunn/vim-easy-align",
-- 	-- event = "VimEnter",
-- 	cmd = { "EasyAlign" },
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-easy-align.vim")
-- 	end,
-- })
-- use({
-- 	"Vonr/align.nvim",
-- 	module = "align",
-- })
-- use {
--   'lambdalisue/suda.vim',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/suda.vim') end
-- }
-- -> sbulav/nredir.nvim
-- use({
-- 	"tyru/capture.vim",
-- 	-- event = "VimEnter"
-- 	cmd = { "Capture" },
-- })
-- -> jinh0/eyeliner.nvim
-- use({
-- 	"unblevable/quick-scope",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/quick-scope.vim")
-- 	end,
-- })
-- repository not found
-- use {'johannesthyssen/vim-signit',
--   cmd = {'Signit'}
-- }
-- use({
-- 	"mattn/vim-sonictemplate",
-- 	-- wrong cursor position
-- 	-- event = "CmdlineEnter",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-sonictemplate.vim")
-- 	end,
-- })
-- because generate the file contents automatically
-- use {'vigoux/templar.nvim',
--   event = "VimEnter"
-- }
-- use({
-- 	"kana/vim-submode",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-submode.vim")
-- 	end,
-- })
-- use({
-- 	"rmagatti/auto-session",
-- 	config = function()
-- 		require("rc/pluginconfig/auto-session")
-- 	end,
-- })
-- use({
-- 	"rmagatti/session-lens",
-- 	after = { "auto-session", "telescope.nvim" },
-- 	config = function()
-- 		require("session-lens").setup()
-- 	end,
-- })
-- use({
--     "drmingdrmer/vim-toggle-quickfix",
--     event = "VimEnter",
--     config = function()
--         vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-toggle-quickfix.vim")
--     end,
-- })
-- conflict quickr-preview.vim
-- detected while processing BufDelete Autocommands for --<buffer=2>--:
-- use {'romainl/vim-qf'}
-- use {'tyru/qfhist.vim', event = "VimEnter"}
-- https://github.com/ronakg/quickr-preview.vim/issues/19
-- use {'ronakg/quickr-preview.vim'}
-- use({ "lambdalisue/readablefold.vim", event = "VimEnter" })
-- use({ "editorconfig/editorconfig-vim", event = "VimEnter" })
-- -> null-ls
-- use({
-- 	"ntpeters/vim-better-whitespace",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-better-whitespace.vim")
-- 	end,
-- })
-- -> uga-rosa/translate.nvim
-- coc-translator
-- use({
-- 	"voldikss/vim-translator",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-translator.vim")
-- 	end,
-- })
-- -> nvim-trevJ.lua
-- use({
-- 	"AckslD/nvim-revJ.lua",
-- 	requires = {
-- 		{ "kana/vim-textobj-user", event = "VimEnter" },
-- 		{ "sgur/vim-textobj-parameter", after = { "vim-textobj-user" } },
-- 	},
-- 	after = { "vim-textobj-user", "vim-textobj-parameter" },
-- 	config = function()
-- 		require("rc/pluginconfig/nvim-revJ")
-- 	end,
-- })
-- archived
-- use({
-- 	"akinsho/dependency-assist.nvim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/dependency-assist")
-- 	end,
-- })
-- -> nvim-bqf
-- use {'yssl/QFEnter',
--   event = "VimEnter"
-- }
-- conflict with vim-test's quickfix
-- use {'itchyny/vim-qfedit' --should compare with use 'stefandtw/quickfix-reflector.vim'}
-- -> zettelkasten
-- use({
-- 	"mtth/scratch.vim",
-- 	cmd = { "Scratch" },
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/scratch.vim")
-- 	end,
-- })
-- -> bfredl/nvim-miniyank
-- use {
--   'svermeulen/vim-yoink',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-yoink.vim') end
-- }
-- -> tkmpypy/chowcho.nvim
-- use {'dstein64/vim-win',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-win.vim') end
-- }
-- -> klen/nvim-test
-- use({
-- 	"janko-m/vim-test",
-- 	-- event = "VimEnter",
-- 	requires = { { "akinsho/toggleterm.nvim", opt = true } },
-- 	after = { "toggleterm.nvim" },
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/vim-test.vim")
-- 	end,
-- })
-- if vim.g.python_version ~= nil and tonumber(vim.g.python_version) >= 307 then
-- 	use({ "rcarriga/vim-ultest", cmd = { "Ultest", "UltestNearest" }, run = ":UpdateRemotePlugins" })
-- end
-- integrate tmux pane
-- use {'numToStr/Navigator.nvim',
--   config = function() require'rc/pluginconfig/Navigator' end
-- }
-- This plugin requires the EDITOR env to be set, but zsh-autocomplete is buggy when the EDITOR is set
-- use {
--   'lambdalisue/edita.vim',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/edita.vim') end
-- }
-- use {'rust-lang/rust.vim',
--   ft = {'rust'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/rust.vim') end
-- }
-- -> nvim-cmp
-- use {
--   'yutkat/CmdlineComplete',
--   event = "CmdlineEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/CmdlineComplete.vim') end
-- }
-- -> cmp-cmdline
-- use {
--   'gelguy/wilder.nvim',
--   event = "VimEnter",
--   run = ':UpdateRemotePlugins',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/wilder.vim') end
-- }
-- -> numToStr/Comment.nvim
-- use {
--   'b3nj5m1n/kommentary',
--   event = "VimEnter",
--   config = function() require 'rc/pluginconfig/kommentary' end
-- }
--------------------------------
-- PlantUML
-- use iamcco/markdown-preview.nvim
-- use {'scrooloose/vim-slumlord', ft = {'plantuml'}}

--------------------------------
-- other fuzzyfinder
-- use {'liuchengxu/vim-clap', { 'do': function('clap#helper#build_all'}) }
-- use {'vitalk/vim-shebang'} -- -> vim-polyglot
-- use {'tpope/vim-abolish'}
-- use {'jdelkins/vim-correction'} -- too slow. it takes 300ms
-- use {'reedes/vim-litecorrect'}
-- use {'panozzaj/vim-autocorrect'}
-- use {'vim-scripts/wordlist.vim' can'}t load lazy
-- coc-spell-checker
-- coc-spell-checker is better because I don't know how to spell it correctly
-- use {'reedes/vim-wordy'}
-- use {'reedes/vim-lexical'}
-- use {'dpelle/vim-LanguageTool'}
-- if vim.fn.executable('java') == 1 then
--   use {'rhysd/vim-grammarous', cmd = {'GrammarousCheck'}}
-- end
-- -> treesitter
-- use {'sheerun/vim-polyglot',
--   event = "VimEnter",
--   setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/vim-polyglot.vim') end,
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-polyglot.vim') end
-- }
-- -> lualine
-- use {
--   'NTBBloodbath/galaxyline.nvim',
--   after = colorscheme,
--   config = function() require 'rc/pluginconfig/galaxyline' end
-- }
-- -> null-ls
-- use {'google/vim-codefmt',
--   requires = {'google/vim-maktaba'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-codefmt.vim') end
-- }
-- use {'mhartington/formatter.nvim'}
-- use {'sbdchd/neoformat'}
-- use {'Chiel92/vim-autoformat'} -- -> neoformat supports more languages
-- -> stevearc/aerial.nvim
-- use {
--   'liuchengxu/vista.vim',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vista.vim') end
-- }
-- use {
--   'pechorin/any-jump.vim',
--   event = "VimEnter",
--   setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/any-jump.vim') end,
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/any-jump.vim') end
-- }
-- archived
-- use {
--   'notomo/helpeek.vim',
--   cmd = {'Helpeek'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/helpeek.vim') end
-- }
-- not used, but it seems useful
-- use {
--   'skywind3000/vim-quickui',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-quickui.vim') end
-- }
-- included barbar.nvim
-- use {'schickling/vim-bufonly',
--   event = "VimEnter"
-- }
-- included barbar.nvim
-- use {'moll/vim-bbye',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-bbye.vim') end
-- }
-- -> akinsho/bufferline.nvim",
-- use {
--   'romgrk/barbar.nvim',
--   after = colorscheme,
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/barbar.vim') end
-- }
-- -> neo-tree
-- use {'yegappan/mru'}
-- use({
-- 	"kyazdani42/nvim-tree.lua",
-- 	event = "VimEnter",
-- 	config = function()
-- 		require("rc/pluginconfig/nvim-tree")
-- 	end,
-- })
-- interesting but not use
-- use {'blueyed/vim-diminactive',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-diminactive.vim') end
-- }
-- interesting but not use
-- use {'zhaocai/GoldenView.Vim',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/GoldenView.vim') end
-- }
--------------------------------
-- fzf
-- use {'junegunn/fzf', event = "VimEnter", run = './install --all --no-update-rc'}
-- use {
--   'junegunn/fzf.vim',
--   after = {'fzf'},
--   setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/fzf.vim') end,
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/fzf.vim') end
-- }
-- -> taskrun.nvim
-- use {
--   'skywind3000/asyncrun.vim',
--   event = "VimEnter",
--   after = {'vim-plugin-AnsiEsc'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/asyncrun.vim') end
-- }
-- use {
--   'skywind3000/asynctasks.vim',
--   after = {'asyncrun.vim'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/asynctasks.vim') end
-- }
-- use {'GustavoKatel/telescope-asynctasks.nvim', after = {'telescope.nvim'}}
-- use {
--   'fannheyward/telescope-coc.nvim',
--   after = {'telescope.nvim'},
--   config = function() require('telescope').load_extension('coc') end
-- }
-- use {'kassio/neoterm', event = "VimEnter"}
-- can not customize
-- use {'skywind3000/asyncrun.extra', after = {'asyncrun.vim', 'vim-floaterm'}}
-- use {'tpope/vim-rails'}, {
--    \   'for': ['ruby']
--    \ }
-- use {'thoughtbot/vim-rspec'}, {
--    \   'for': ['ruby']
--    \ }
-- use {'violetyk/cake.vim',
--   ft = {'php'}
-- }
-- -> iron.nvim
-- use {'metakirby5/codi.vim',
--   event = "VimEnter"
-- }
-- use {'sillybun/vim-repl'}
-- use {'google/ijaas'}, {
--       \   'rtp': 'vim',
--       \   'for': ['c', 'cpp', 'java'],
--       \ }
-- use {'thecodesmith/vim-groovy',
--   ft = {'groovy'},
-- }
-- use {'slashmili/alchemist.vim',
--   ft = {'elixir'}
-- }
-- -> petertriho/nvim-scrollbar
-- performance problem
-- use {'Xuyuanp/scrollbar.nvim'}
-- use({
-- 	"dstein64/nvim-scrollview",
-- 	after = colorscheme,
-- 	setup = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginsetup/nvim-scrollview.vim")
-- 	end,
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/nvim-scrollview.vim")
-- 	end,
-- })
-- -> neogit
-- use {
--   'lambdalisue/gina.vim',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/gina.vim') end
-- }
-- -> diffview
-- use({
-- 	"cohama/agit.vim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/agit.vim")
-- 	end,
-- })
-- -> lightspeed
-- use({
-- 	"rhysd/clever-f.vim",
-- 	event = "VimEnter",
-- 	config = function()
-- 		vim.cmd("source ~/.config/nvim/rc/pluginconfig/clever-f.vim")
-- 	end,
-- })
-- use {'gotchane/vim-git-commit-prefix'}
-- use {
--   'rhysd/git-messenger.vim',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/git-messenger.vim') end
-- }
-- use({ "rhysd/conflict-marker.vim", event = "VimEnter" })
-- local colorscheme = 'onedark.nvim'
-- use {'ful1e5/onedark.nvim', config = function() require 'rc/pluginconfig/onedark' end}
-- local colorscheme = 'gruvbox-material'
-- use {
--   'sainnhe/gruvbox-material',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/gruvbox-material.vim') end
-- }
-- CocErrorSign is not defined
-- use {'luisiacc/gruvbox-baby', config = function() require 'rc/pluginconfig/gruvbox-baby' end}
-- use {
--   'kunzaatko/nord.nvim',
--   requires = {'rktjmp/lush.nvim', opt = true},
--   config = function() require 'rc/pluginconfig/nord' end
-- }
-- local colorscheme = 'nightfox.nvim'
-- use {'EdenEast/nightfox.nvim',
--   config = function() vim.cmd('colorscheme nightfox') end
-- }
-- Hard to see
-- local colorscheme = 'material.nvim'
-- use {'marko-cerovac/material.nvim',
--   config = function() vim.cmd('colorscheme material') end
-- }
-- too slow, Hard to see
-- local colorscheme = 'gruvbox.nvim'
-- use {
--   'ellisonleao/gruvbox.nvim',
--   requires = {"rktjmp/lush.nvim"},
--   config = function() vim.cmd('colorscheme gruvbox') end
-- }
-- local colorscheme = 'neon'
-- use {
--   'rafamadriz/neon',
--   config = function() vim.cmd('colorscheme neon') end
-- }
-- local colorscheme = 'nvim-hybrid'
-- use {
--   'PHSix/nvim-hybrid',
--   config = function() require('hybrid') end
-- }
-- use({
-- 	"nvim-neorg/neorg",
-- 	cmd = { "NeorgStart" },
-- 	requires = { "nvim-treesitter/nvim-treesitter", "nvim-lua/plenary.nvim", "nvim-lua/popup.nvim" },
-- 	config = function()
-- 		require("rc/pluginconfig/neorg")
-- 	end,
-- })
-- use {
--   "kristijanhusak/orgmode.nvim",
--   event = "VimEnter",
--   config = function() require('rc/pluginconfig/orgmode') end
-- }

-- if vim.fn.executable('neuron') == 1 then
--   use {
--     'oberblastmeister/neuron.nvim',
--     branch = 'unstable',
--     run = function()
--       local dir = vim.fn.stdpath('data') .. "/neuron/"
--       local file = dir .. "neuron.dhall"
--       os.execute("mkdir -p " .. dir)
--       if vim.fn.filewritable(file) == 0 then
--         os.execute("touch " .. file)
--       end
--     end,
--     requires = {'nvim-telescope/telescope.nvim'},
--     config = function() require('rc/pluginconfig/neuron') end
--   }
-- end
-- -> format.nvim
-- if vim.fn.executable('shfmt') == 1 then
--   use {'z0mbix/vim-shfmt',
--     ft = {'sh', 'zsh'},
--     setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/vim-shfmt.vim') end
--   }
-- end
-- use {'mopp/layoutplugin.vim', cmd = {'LayoutPlugin'}}
-- use {'vim-jp/vital.vim'}
-- use LSP
-- use {'Shougo/neco-vim'}
-- use {'neoclide/coc-neco',
--   ft = {'vim'}
-- }
-- marks.nvim
-- use {
--   'MattesGroeger/vim-bookmarks',
--   event = "VimEnter",
--   setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/vim-bookmarks.vim') end,
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-bookmarks.vim') end
-- }
-- -> rafamadriz/friendly-snippets
-- use {'honza/vim-snippets', event = "VimEnter"}
-- use {
--   'voldikss/vim-skylight',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-skyligh.vim') end
-- }
-- if vim.fn.executable('node') == 1 then
--   use {
--     'neoclide/coc.nvim',
--     branch = 'release',
--     -- branch = 'master',
--     -- run = 'yarn install --frozen-lockfile',
--     config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/coc.vim') end
--   }
--   -- use {
--   --   'antoinemadec/coc-fzf',
--   --   branch = 'release',
--   --   event = "VimEnter",
--   --   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/coc-fzf.vim') end
--   -- }
--   use {'rafcamlet/coc-nvim-lua', event = "VimEnter"}
--
--   -- LuaFormatter off
--   vim.g.coc_global_extensions = {
--     'coc-marketplace',
--     'coc-tag',
--     'coc-dictionary',
--     'coc-word',
--     'coc-yank',
--     'coc-floatinput',
--     -- 'coc-highlight',
--     -- -> alternative nvim-treesitter/nvim-treesitter-refactor
--     'coc-just-complete',
--     'coc-dot-complete',
--     'coc-dash-complete',
--     'coc-emoji',
--     'coc-omni',
--     'coc-syntax',
--     'coc-emmet',
--     'coc-lists',
--     'coc-snippets',
--     'coc-postfix',
--     'coc-markdownlint',
--     'coc-markmap',
--     'coc-json',
--     'coc-yaml',
--     'coc-toml',
--     'coc-sh',
--     'coc-vimlsp',
--     'coc-pyright',
--     'coc-rust-analyzer',
--     'coc-clangd',
--     'coc-html',
--     'coc-svelte',
--     'coc-css',
--     'coc-db',
--     'coc-diagnostic',
--     'coc-gitignore',
--     -- 'coc-explorer',
--     'coc-spell-checker',
--     'coc-project',
--     'coc-terminal',
--     'coc-tasks',
--     'coc-translator',
--     'coc-calc',
--     'coc-webview',
--     'coc-markdown-preview-enhanced'
--   }
--   -- 'coc-floaterm',
--   -- 'coc-git', -- -> gitsigns.nvim
--   -- 'coc-template', -- -> archived
--   -- 'coc-python',
--   -- 'coc-lines', -- -> too many candidates for completion
--   -- 'coc-pairs', -- -> change lexima because it's too simple
--   -- 'coc-smartf', -- -> clever-f, easymotion I want to search with only one line, but it can't
--   -- 'coc-actions' -- -> use coc-codeaction
--   -- 'coc-todolist', -- -> Deprecated
--   -- LuaFormatter on
--
--   if vim.fn.executable('nextword') == 1 then
--     vim.cmd("call add(g:coc_global_extensions, 'coc-nextword')")
--   end
--
--   if vim.fn.executable('prettier') == 1 then
--     vim.cmd("call add(g:coc_global_extensions, 'coc-prettier')")
--   end
--
--   if vim.fn.executable('eslint') == 1 then
--     vim.cmd("call add(g:coc_global_extensions, 'coc-eslint')")
--   end
--
--   if vim.fn.executable('lua-language-server') == 1 then
--     vim.cmd("call add(g:coc_global_extensions, 'coc-lua')")
--   end
--   if vim.fn.executable('typescript-language-server') == 1 then
--     vim.cmd("call add(g:coc_global_extensions, 'coc-tsserver')")
--     vim.cmd("call add(g:coc_global_extensions, 'coc-deno')")
--   end
--   if vim.fn.exists('$SSH_CLIENT') == 0 and vim.fn.exists('$SSH_TTY') == 0 and
--       vim.fn.exists('$SSH_CONNECTION') == 0 then
--     vim.cmd("call add(g:coc_global_extensions, 'coc-tabnine')")
--     vim.cmd("call add(g:coc_global_extensions, 'coc-gist')")
--   end
--   -- only python is supported. Edit CocConfig
--   -- if vim.fn.executable('systemctl') == 1 then
--   -- if os.execute() == 1 then
--   -- if os.execute('systemctl --user is-active -q kite-autostart 2>/dev/null 2>&1') == 0 then
--   -- vim.cmd("call add(g:coc_global_extensions, 'coc-kite')")
--   -- end
--   -- end
--   -- end
--   if vim.fn.isdirectory(vim.fn.expand('~/.local/share/kite')) == 1 then
--     vim.cmd("call add(g:coc_global_extensions, 'coc-kite')")
--   end
-- end
-- use {
--   'hrsh7th/vim-seak',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-seak.vim') end
-- }
-- nvim-config-local
-- use {
--   'embear/vim-localvimrc',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-localvimrc.vim') end
-- }
-- vim-startify
-- use {'tpope/vim-obsession'}
-- I don't want to restore automatically
-- use {'thaerkh/vim-workspace'}
-- use {
--   'Shatur/neovim-session-manager',
--   config = function() require('rc/pluginconfig/neovim-session-manager') end
-- }
-- -> akinsho/toggleterm.nvim
-- use {
--   'voldikss/vim-floaterm',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-floaterm.vim') end
-- }
-- lukas-reineke/indent-blankline.nvim
-- use {'Yggdroot/indentLine',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/indentLine.vim') end
-- }
-- -> chentau/marks.nvim
-- use {
--   'kshenoy/vim-signature',
--   event = "VimEnter",
--   setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/vim-signature.vim') end
-- }
-- use {
--   'jeetsukumaran/vim-markology',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-markology.vim') end
-- }
-- --> goolord/alpha-nvim
-- use {
--   'glepnir/dashboard-nvim',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/dashboard-nvim.vim') end
-- }
-- --> lukas-reineke/indent-blankline.nvim
-- use {
--   'glepnir/indent-guides.nvim',
--   event = "VimEnter",
--   config = function() require 'rc/pluginconfig/indent-guides' end
-- }
-- -> crazy8
--  use { 'lambdalisue/vim-findent', cmd = {'Findent'}}
-- -> crazy8
-- use {
--   'tpope/vim-sleuth',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-sleuth.vim') end,
--   cmd = {'Sleuth'}
-- }
-- don't consider tab
-- use {
--   'winston0410/smart-cursor.nvim',
--   event = "VimEnter",
--   config = function() require 'rc/pluginconfig/smart-cursor' end
-- }
-- use {'mhinz/vim-startify',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-startify.vim') end
-- }
-- -> s1n7ax/nvim-comment-frame
-- use {'cometsong/CommentFrame.vim',
--   event = "VimEnter",
--   setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/CommentFrame.vim') end
-- }
-- -> dial.nvim
-- use {
--   'syngan/vim-clurin',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-clurin.vim') end
-- }
-- I don't use this much
-- use {
--   'matze/vim-move',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-move.vim') end
-- }
-- I'm defining emacs-style map for myself.
-- use {'tpope/vim-rsi', event = "VimEnter"}
-- https://github.com/neovim/neovim/issues/1822
-- use {
--   'bfredl/nvim-miniyank',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/nvim-miniyank.vim') end
-- }
-- -> treesitter
-- use {'arp242/jumpy.vim', event = "VimEnter"}
-- neuron.nvim
-- use {
--   'glidenote/memolist.vim',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/memolist.vim') end
-- }
-- -> nvim-peekup
-- use {
--   'junegunn/vim-peekaboo',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-peekaboo.vim') end
-- }
-- -> nvim-spectre
-- use {'mhinz/vim-grepper', cmd = {'Grepper'}}
-- -> nvim-revJ
-- use {
--   'AndrewRadev/splitjoin.vim',
--   opt = true,
--   event = "VimEnter",
--   setup = function() vim.cmd('source ~/.config/nvim/rc/pluginsetup/splitjoin.vim') end
-- }
-- -> nvim-dap
-- use {
--   'puremourning/vimspector',
--   run = './install_gadget.py --all',
--   cmd = {'VimspectorReset'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vimspector.vim') end
-- }
-- -> sudormrfbin/cheatsheet.nvim
-- use {
--   'reireias/vim-cheatsheet',
--   -- event = "VimEnter",
--   cmd = {'Cheat'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-cheatsheet.vim') end
-- }
-- -> which-key.nvim
-- use {'liuchengxu/vim-which-key',
--   event = "VimEnter",
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-which-key.vim') end
-- }
-- Lua main
-- use {'thinca/vim-scouter', cmd = {'Scouter'}}
-- coc-highligh
-- use {
--   'chrisbra/Colorizer',
--   cmd = {'ColorHighlight'},
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/Colorizer.vim') end
-- } -- -> same as vim-plugin-AnsiEsc. But it cannot do colorize
-- -> TrueZen.nvim
-- use {'junegunn/goyo.vim',
--   cmd = { 'Goyo' },
-- }
-- -> wadackel/nvim-syntax-info
-- use {'cocopon/inspecthi.vim',
--   cmd = {'Inspecthi'}
-- }
-- -> memolist
-- Shougo/junkfile.vim
-- -> Gina chaperon
-- use {'idanarye/vim-merginal'}
-- b3nj5m1n/kommentary
-- use {'tyru/caw.vim',
--  config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/caw.vim') end
-- }
-- use {'terrortylor/nvim-comment'}
-- use {'preservim/nerdcommenter',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/nerdcommenter.vim') end
-- }
-- use {'tomtom/tcomment_vim'}
-- asyncrun
-- use {'igemnace/vim-makery'}
-- my autocmd
-- use {'jeffkreeftmeijer/vim-numbertoggle'}
-- vim-win
-- use {'simeji/winresizer',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/winresizer.vim') end
-- }
-- -> replacer.nvim
-- use {'brooth/far.vim'}
-- vim-swap
-- use {'AndrewRadev/sideways.vim',
--   cmd = {'SidewaysLeft', 'SidewaysRight'},
-- }
-- splitjoin
-- use {'osyo-manga/vim-jplus',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-jplus.vim') end
-- }
-- use {'easymotion/vim-easymotion',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/vim-easymotion.vim') end
-- }
-- use {'cohama/lexima.vim',
--   config = function() vim.cmd('source ~/.config/nvim/rc/pluginconfig/lexima.vim') end
-- }
-- -> coc-fzf-preview
-- if has('nvim')
--  function! FzfPreviewInstaller() abort
--    call system('npm install -g neovim')
--    FzfPreviewInstall
--  endfunction
--  use {'yuki-ycino/fzf-preview.vim', { 'do'}: { -> FzfPreviewInstaller() } }
-- endif
-- use {'fatih/vim-go'}, {
--       \   'for': ['go']
--       \ }
-- if has('nvim')
-- use {'glepnir/indent-guides.nvim'}
-- else
-- endif
-- if has('nvim')
-- else
--   use {'wellle/context.vim'}
-- endif
-- if has('nvim')
--   -- treesitter
--   -- 'p00f/nvim-ts-rainbow'
-- else
--   use {'kien/rainbow_parentheses.vim'}
-- endif
-- else
--   use {'thinca/vim-qfreplace'}
-- endif
-- else
--  -- use {'obcat/vim-sclow'}
-- endif
-- else
--  use {'itchyny/lightline.vim'}
-- endif
-- ColorScheme
-- use {'micke/vim-hybrid'}
-- use {'ajmwagar/vim-deus'} -- support coc
-- use {'kjssad/quantum.vim'} -- support coc
-- use {'kristijanhusak/vim-hybrid-material'}
-- use {'rhysd/vim-color-spring-night'}
-- use {'arcticicestudio/nord-vim'}
-- use {'gruvbox-community/gruvbox'}
-- use {'sainnhe/edge'} -- support coc and lightline
-- use {'sainnhe/vim-color-forest-night'} -- support coc and lightline
-- use {'cocopon/iceberg.vim'}
-- use {'jonathanfilip/vim-lucius'}
-- use {'tomasr/molokai'}
-- use {'nanotech/jellybeans.vim'}
-- if has('nvim') && has('python3')
--  use {'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins'} }
-- else
-- use {'lambdalisue/fern.vim'}
-- endif
--  else
--    use {'mg979/vim-xtabline'}
--  endif
-- if !has('nvim')
--   use {'haya14busa/incsearch.vim'}
--   use {'haya14busa/incsearch-fuzzy.vim'}
--   use {'osyo-manga/vim-anzu'}
-- endif
-- if !has('nvim')
--   use {'svermeulen/vim-subversive'}
-- endif
-- if ! has('nvim')
--   use {'svermeulen/vim-yoink'}
-- endif
-- use {'tbo/notion', { 'do': ':UpdateRemotePlugins'} }
-- use {'zsugabubus/vim-jumpmotion'}
-- Not much use
-- use {'ripxorip/aerojump.nvim', { 'do': ':UpdateRemotePlugins'} }
-- use {'chaoren/vim-wordmotion'} -- -> CamelCaseMotion
-- conflict with vim-xtabline https://github.com/mg979/vim-xtabline/issues/13
-- use {'rhysd/accelerated-jk'}

-- use {'aperezdc/vim-template'} -- -> sonictemplate
-- I cannot use tig
-- use {'iberianpig/tig-explorer.vim'}
-- only work for add & commit
-- if has('nvim')
--  use {'kdheepak/lazygit.nvim'}
-- endif
-- use {'bogado/file-line'} -- -> vim-fetch
-- if has('nvim')
--  use {'f-person/git-blame.nvim'}
-- endif
-- use {'APZelos/blamer.nvim'} -- coc-git
-- use {'jceb/vim-orgmode'} -- -> UNMAINTAINED
-- use {'bignimbus/you-are-here.vim'} -- -> vim only
-- use {'t9md/vim-choosewin'} -- vim-win
-- use {'google/vim-searchindex'} -- -> vim-anzu
-- use {'mattn/vim-gist'} -- -> coc-gist
-- -> gina. fugitive was stale.
-- -> vim-fugitive because of the improved command system.
-- if str2float(matchstr(system('git --version'), '\%(\d\.\)\+\d')) >= 1.9 &&
--      \ (has('nvim') || ((v:version == 800 && has('patch27')) || v:version >= 801))
--  use {'lambdalisue/gina.vim'}
-- endif
-- -> readablefold.vim
-- use {'LeafCage/foldCC'}
-- -> coc.nvim
--  use {'prabirshrestha/asyncomplete.vim'}
--  use {'prabirshrestha/async.vim'}
--  use {'prabirshrestha/vim-lsp'}
--  use {'prabirshrestha/asyncomplete-lsp.vim'}
--  use {'mattn/vim-lsp-settings'}
--  use {'SirVer/ultisnips'}
-- google/vim-codefmt -- -> Chiel92/vim-autoformat
-- use {'tpope/vim-dispatch'} ---> asynctasks
-- machakann/vim-columnmove
-- use {'tyru/columnskip.vim'}
-- -> vimspector
-- if has('nvim')
--  use {'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins'} }
-- endif
-- gen_tags.vim
---- https://github.com/ludovicchabant/vim-gutentags/issues/269
---- https://github.com/ludovicchabant/vim-gutentags/issues/178
-- use {'ludovicchabant/vim-gutentags'}, {
--      \   'on': [ 'GutentagsToggleEnabled' ]
--      \ }
-- use {'skywind3000/gutentags_plus'}
-- mcchrish/nnn.vim -- -> defx
-- coc-spell-checker
----use {'kamykn/spelunker.vim'} -- -> buffer switch is too slow
-- use {'rhysd/vim-grammarous'}
-- if executable('aspell')
--  use {'shinglyu/vim-codespell'}
-- endif
-- if !has('nvim')
--  use {'heavenshell/vim-textlint'}
-- endif
-- markonm/traces.vim -- -> neovim set inccommand=split
-- coc-translator
-- use {'echuraev/translate-shell.vim'}
-- use {'haya14busa/vim-open-googletranslate'}
-- use {'mattn/vim-sonictemplate'} -- -> coc-template
-- -> mkdx
-- use {'plasticboy/vim-markdown'}, {
--      \   'for': ['markdown']
--      \ }
-- rust doesn't support
-- inkarkat/vim-CountJump
-- use {'RobertCWebb/vim-jumpmethod'}
-- use {'jeetsukumaran/vim-buffergator'} -- -> fzf-preview
-- use {'jlanzarotta/bufexplorer' -- -> can'}t open split window vim-buffergator
-- -> fzf-preview.vim
-- use {'pbogut/fzf-mru.vim'}
-- use {'tweekmonster/fzf-filemru'}
-- raghur/fruzzy -- -> fzf
-- Yggdroot/LeaderF -- -> fzf
-- lotabout/skim -- -- -> fzf
-- thinca/vim-poslist -- -> osyo-manga/vim-milfeulle
-- use {'mhinz/vim-signify'} -- -> coc-git
-- use {'farmergreg/vim-lastplace'} -- do not use
-- tyru/caw.vim, /tomtom/tcomment_vim -- -> nerdcommenter
-- use {'Shougo/neosnippet'} -- -> ultisnips
-- use {'Shougo/neosnippet-snippets'}
-- use {'tpope/vim-endwise'}, { -- -> cohama/lexima.vim
--      \   'for': ['ruby']
--      \ }
-- use {'godlygeek/tabular'}, { -- -> dhruvasagar/vim-table-mode
--      \   'on': [ 'Tabularize' ],
--      \ }
-- use {'tpope/vim-unimpaired'} -- -> slow on startup
-- use {'osyo-manga/vim-automatic'} -- -> zhaocai/GoldenView.Vim because slow startup
-- use {'osyo-manga/vim-trip'} -- -> syngan/vim-clurin
-- use {'vim-scripts/camelcasemotion'} -- -> bkad/CamelCaseMotion because too old

-- not using
-- use {'emonkak/vim-operator-comment'}
-- use {'emonkak/vim-operator-sort'}
-- use {'ToruIwashita/git-switcher.vim'} -- -> vim-obsession
-- use {'rhysd/vim-operator-surround'} -- -> vim-sandwich
-- use {'wincent/ferret'} -- -> vim-grepper
-- use {'osyo-manga/vim-over'} -- -> default feature
-- use {'osyo-manga/vim-hopping'} -- -> CocList
-- bootleq/vim-cycle, zef/vim-cycle, AndrewRadev/switch.vim -- -> syngan/vim-clurin
-- coc-spell-checker
-- use {'inkarkat/vim-ingo-library'}
-- use {'inkarkat/vim-spellcheck'}
-- inkarkat/vim-SearchHighlighting, highlight_word_under_cursor.vim,
-- HiCursorWords, bronson/vim-visual-star-search, thinca/vim-visualstar,
-- luochen1990/select-and-search, qstrahl/vim-matchmaker, itchyny/vim-cursorword,
-- timakro/vim-searchant -- -> vim-asterisk
-- use {'nelstrom/vim-visual-star-search'} -- -> conflict vim-asterisk
-- dpelle/vim-LanguageTool -- -> rhysd/vim-grammarous
-- thirtythreeforty/lessspace.vim -- vim-better-whitespace
-- tommcdo/vim-exchange -- vim-swap
-- tommcdo/vim-lion -- vim-easy-align
-- tpope/vim-sleuth -- vim-polyglot
-- romainl/vim-cool -- I don't use disables search highlighting
-- PeterRincker/vim-argumentative -- vim-swap
-- FooSoft/vim-argwrap -- I use each lang formatter
-- ryanoasis/vim-devicons -- I don't use icons
-- use {'tpope/vim-fugitive'} -- -> coc-git
-- use {'svermeulen/vim-easyclip'} -- -> vim-cutlass, vim-yoink, vim-subversive
-- use {'LeafCage/yankround.vim'} -- -> svermeulen/vim-yoink
-- use {'chrisbra/Colorizer'} -- -> coc-highlight
-- use {'vim-scripts/grep.vim'} -- -> mhinz/vim-grepper
-- use {'w0ng/vim-hybrid'} -- kristijanhusak/vim-hybrid-material
-- not support deoplete
-- let s:deoplete_enable = 0
-- elseif has('nvim') && has('python3')
--  use {'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins'} }
--  if exists('##CompleteChanged')
--    use {'ncm2/float-preview.nvim'}
--  endif
--  use {'Shougo/echodoc.vim'}
--  use {'Shougo/neco-syntax'}
--  let s:deoplete_enable = 1
-- elseif (s:deoplete_enable == 1)
--  use {'autozimu/LanguageClient-neovim'}, {
--        \ 'branch': 'next',
--        \ 'do': 'bash install.sh',
--        \ }
-- if (s:deoplete_enable == 1)
--  use {'tbodt/deoplete-tabnine', { 'do': './install.sh'} }
-- else

-- dispatch
-- use {'thinca/vim-quickrun'}
-- use {'dannyob/quickfixstatus'}
-- use {'KazuakiM/vim-qfstatusline'}
-- use {'osyo-manga/shabadou.vim'}

-- Use LSP
-- use {'Shougo/neoinclude.vim'}, {
--      \   'for': ['c', 'cpp', 'objc']
--      \ }
-- if (s:coc_enable == 1)
--  use {'jsfaint/coc-neoinclude'}, {
--      \   'for': ['c', 'cpp', 'objc']
--      \ }
-- endif
-- use {'Shougo/neomru.vim'}
-- use {'justinmk/vim-dirvish'} -- -> defx
-- use {'kristijanhusak/vim-dirvish-git'}
-- use {'Xuyuanp/nerdtree-git-plugin'}
-- use {'scrooloose/nerdtree'}, { -- -> defx
--       \   'on': ['NERDTree', 'NERDTreeToggle'],
--       \ }
-- use {'majutsushi/tagbar'} -- -> vista.vim
-- use {'airblade/vim-gitgutter'} -- -> coc-git
-- if ((v:version == 800 && has('patch27')) || v:version >= 801) -- -> coc.nvim
--       \ || has('nvim')
--   use {'w0rp/ale'}
-- endif
-- use {'xolox/vim-session'} -- -> tpope/vim-obsession
-- --depend 'xolox/vim-misc'
-- use {'xolox/vim-misc'}
-- use {'tyru/operator-camelize.vim'} -- -> mopp/vim-operator-convert-case
-- use {'mattn/emmet-vim'}, { -- -> coc-emmet
--       \   'for': ['html']
--       \ }
-- use {'haya14busa/vim-operator-flashy'} -- -> coc-yank
---- depend 'kana/vim-operator-user'
-- use lsp (vim-language-server)
-- use {'vim-scripts/sudo.vim'} -- -> suda.vim
-- use {'vim-scripts/autopreview'} -- -> use lsp
-- use {'ap/vim-buftabline'} -- -> vim-xtabline
-- if has('nvim') -- -> nvim-gdb
--  use {'critiqjo/lldb.nvim'}, {
--        \   'for': ['c', 'cpp'],
--        \   'do': ':UpdateRemotePlugins'
--        \ }
-- endif
-- use {'osyo-manga/vim-brightest'}, { -- -> RRethy/vim-illuminate
--      \   'on': [ 'BrightestEnable', 'BrightestToggle' ]
--      \ }
-- because dislike the autoclear
-- if ((v:version == 800 && has('patch1238')) || v:version >= 801)
--   use {'haya14busa/is.vim'}
-- endif
-- use {'neomake/neomake'} -- -> ale
-- too old
-- else
--   use {'Shougo/vimproc.vim'}, {
--         \   'do': 'make',
--         \ }
--   use {'osyo-manga/vim-watchdogs'}
--   use {'cohama/vim-hier'}
--   use {'KazuakiM/vim-qfsigns'}
--   --depend 'Shougo/vimproc.vim'
--   --depend 'thinca/vim-quickrun'
--   --depend 'osyo-manga/shabadou.vim'
--   --depend 'KazuakiM/vim-qfsigns'
--   --depend 'dannyob/quickfixstatus'
--   --depend 'KazuakiM/vim-qfstatusline'
--   --depend 'cohama/vim-hier'
-- function! s:meet_neocomplete_requirements() abort
--   return has('lua') && (v:version > 703 || (v:version == 703
--         \ && has('patch885')))
-- endfunction
-- elseif (v:version == 800) && (has('python3') || has('python'))
--   use {'maralla/completor.vim'}
-- else
--   if s:meet_neocomplete_requirements()
--     use {'Shougo/neocomplete.vim'}
--   else
--     use {'Shougo/neocomplcache.vim'}
--   endif
-- use {'Valloric/ListToggle'} -- -> vim-qf
-- united python-mode
-- use {'andviro/flake8-vim'}, {
--      \   'for': ['python']
--      \ }
-- use {'hynek/vim-python-pep8-indent'}, {
--      \   'for': ['python']
--     \ }
-- use {'tpope/vim-surround'} -- -> vim-sandwich
-- use {'greymd/oscyank.vim'} -- -> worked without this
-- use {'Houl/repmo-vim' -- -> can'}t repeat ]]
-- Error Undefined variable: mappings -> switch default to osyo-manga/vim-milfeulle
-- use {'inkarkat/vim-ingo-library'}
-- use {'inkarkat/vim-EnhancedJumps'}
-- Debugger
-- use {'gilligan/vim-lldb'} -- -> only lldb
-- use {'dbgx/lldb.nvim'} -- -> require Neovim python2-client
-- use {'huawenyu/neogdb.vim'} -- -> Not supoprt lldb
-- use {'vim-vdebug/vdebug'} -- -> Not support C++,Rust
-- use {'skyshore2001/vgdb-vim'} -- -> Not recently updated. sakhnik/nvim-gdb
-- use {'cpiger/NeoDebug'} -- -> Not recently updated.
-- use {'vim-scripts/Conque-GDB'} -- -> too old
-- use {'idanarye/vim-vebugger'} -- -> require vimproc
-- included polyglot
-- use {'octol/vim-cpp-enhanced-highlight'}, {
--       \   'for': ['c', 'cpp', 'objc']
--       \ }
-- use {'othree/html5.vim'}, {
--       \   'for': ['html']
--       \ }
-- use {'hail2u/vim-css3-syntax'}, {
--       \   'for': ['css']
--       \ }
-- use {'groenewege/vim-less'}, {
--       \   'for': ['css']
--       \ }
-- use {'pangloss/vim-javascript'}, {
--       \   'for': ['javascript']
--       \ }
-- use {'posva/vim-vue'}, {
--       \   'for': ['vue']
--       \ }
-- use {'ryym/vim-riot'}, {
--       \   'for': ['riot']
--       \ }
-- use {'elixir-lang/vim-elixir'}, {
--       \   'for': ['elixir']
--       \ }
-- use {'pearofducks/ansible-vim'}, {
--       \   'for': ['yaml', 'ansible']
--       \ }
-- use {'hashivim/vim-terraform'}, {
--       \   'for': ['terraform']
--       \ }
--
-- Change to LSP from deoplete
-- if (s:deoplete_enable == 1)
--  -- use {'zchee/deoplete-clang'}, {
--  --       \   'for': ['c', 'cpp'],
--  --       \ }
-- else
--  use {'justmao945/vim-clang'}, {
--        \   'for': ['c', 'cpp'],
--        \ }
-- endif
-- if (s:deoplete_enable == 1)
--  use {'carlitux/deoplete-ternjs'}
--  --, { 'do': 'npm install -g tern' }
--  use {'mhartington/deoplete-typescript'}, {
--        \   'for': ['typescript']
--        \ }
-- endif
-- if (s:deoplete_enable == 1)
--  use {'zchee/deoplete-jedi'}, {
--        \   'for': ['python']
--        \ }
-- else
--  use {'davidhalter/jedi-vim'}, {
--        \   'for': ['python']
--        \ }
-- endif
-- if (s:deoplete_enable == 1)
--  use {'zchee/deoplete-go'}, {
--        \   'for': ['go'],
--        \   'do': 'make'
--        \ }
-- endif
-- use autozimu/LanguageClient-neovim
-- use {'racer-rust/vim-racer'}, {
--       \   'for': ['rust']
--       \ }
-- if (s:deoplete_enable == 1)
--   use {'sebastianmarkow/deoplete-rust'}, {
--         \   'for': ['rust']
--         \ }
-- endif
-- use {'deris/vim-shot-f'} -- -> conflict clever-f
-- -> ludovicchabant/vim-gutentags
-- use {'vim-scripts/gtags.vim'}, {
--       \   'for': ['c', 'cpp', 'java'],
--       \ }
-- vim-matchup
-- if (v:version == 704 && has('patch786')) || v:version >= 705
--  let g:loaded_matchparen = 1 | use {'itchyny/vim-parenmatch'}
-- endif
-- use {'milkypostman/vim-togglelist'} -> Valloric/ListToggle
-- use {'bronson/vim-trailing-whitespace'} -> ntpeters/vim-better-whitespace
-- use {'tpope/vim-speeddating' -- -> didn'}t use
-- Use fzf.vim
----------------------------------
---- Unite/denite
-- if (has('nvim') || v:version >= 800) && has('python3')
--  use {'Shougo/denite.nvim'}
-- else
--  use {'Shougo/unite.vim'}
--  use {'ujihisa/unite-locate'}
--  use {'Shougo/neomru.vim'}
--  use {'Shougo/neoyank.vim'}
--  use {'Shougo/unite-build'}
--  use {'thinca/vim-qfreplace'}
--  use {'ujihisa/quicklearn'}
--  use {'Shougo/unite-outline'}
--  use {'tsukkee/unite-tag'}
--  use {'tsukkee/unite-help'}
--  use {'ujihisa/unite-colorscheme'}
--  use {'thinca/vim-unite-history'}
--  use {'osyo-manga/unite-quickfix'}
--  use {'osyo-manga/unite-quickrun_config'}
--  use {'tacroe/unite-mark'}
--  use {'amitab/vim-unite-cscope'}
--  use {'kmnk/vim-unite-giti'}
--  use {'osyo-manga/unite-highlight'}
--  use {'yuku-t/vim-ref-ri'}
-- endif
--
----------------------------------
---- CtrlP
-- use {'ctrlpvim/ctrlp.vim'}
-- use {'sgur/ctrlp-extensions.vim'}
-- use {'tacahiroy/ctrlp-funky'}
-- use {'jasoncodes/ctrlp-modified.vim'}

-- Conflict with vim-polyglot
-- use {'Shougo/neosnippet'}
-- use {'Shougo/neosnippet-snippets'}
-- use {'Shougo/vimfiler'}, { -- -> vim-dirvish
--       \   'on': [ 'VimFilerTab', 'VimFiler', 'VimFilerExplorer' ]
--       \ }
-- depend 'Shougo/unite.vim'
-- not used recently
-- use {'Shougo/neopairs.vim'}
-- not used recently
-- use {'Shougo/vimproc.vim'}, {
--      \   'do': 'make',
--      \ }
-- use {'Shougo/vimshell'}, {
--      \   'on': [ 'VimShellBufferDir' ],
--      \ }
----depend 'Shougo/vimproc.vim'
--------------------------------
-- Rarely used
-- use {'FredKSchott/CoVim'}, {
--       \   'on': [ 'CoVim' ]
--       \ }

--------------------------------
-- broken plugins
-- use {'fidian/hexmode'} -- -> ;3R display
---- Tag
-- use {'szw/vim-tags'} -- -> broken in tmux
---- Fold
-- use {'Konfekt/FastFold'} -- -> too slow boot
-- unused plugins
-- use {'miyakogi/conoline.vim'} -- -> cool highlight current line
-- use {'gabrielelana/vim-markdown'}, { -- -> plasticboy/vim-markdown
--       \   'for': ['markdown']
--       \ }
-- use {'plasticboy/vim-markdown'}, { -- -> link paste is wrong
-- \   'for': ['markdown']
-- \ }
-- --depend 'godlygeek/tabular'
-- use {'godlygeek/tabular'}

--------------------------------
-- old plugins
-- use {'osyo-manga/vim-snowdrop'}, {
--     \   'for': ['c', 'cpp'],
--     \ }
-- use {'osyo-manga/vim-reunions'}
-- use {'osyo-manga/vim-marching'}, { -- -> difficult include path
-- \   'for': ['c', 'cpp']
-- \ }
-- --depend 'Shougo/vimproc.vim'
-- --depend 'osyo-manga/vim-reunions'
-- use {'troydm/easybuffer.vim'} -- -> vim-buffergator
-- use {'jiangmiao/auto-pairs'} -- -> ignore autopair if next char is not a blank
-- use {'herry/auto-pairs'}
-- use {'eapache/auto-pairs'}
-- use {'Raimondi/delimitMate'} -- -> lexima
-- use {'optroot/auto-pairs' -- -> it's many features than 'delimitMate'}
-- use {'bkad/CamelCaseMotion'} -- -> 'vim-scripts/camelcasemotion' '{'} wrong motion
-- use {'junegunn/gv.vim'} -- -> cohama/agit.vim
-- use {'fuenor/im_control.vim'}  -- ibus control -> unused
-- use {'scrooloose/syntastic'} -- -> watchdogs
-- use {'mkitt/tabline'} -- -> lightline
-- use {'gcmt/taboo'} -- -> lightline
-- use {'bootleq/vim-tabline'} -- -> lightline
-- -- It's nice to be able to separate tabs and buffers. but can't display numbers
-- use {'zefei/vim-wintabs'} -- -> ap/vim-buftabline
-- use {'vim-scripts/BufLine'} -- -> ap/vim-buftabline simple
-- use {'bling/vim-bufferline'} -- -> ap/vim-buftabline integrated lightline
-- use {'zefei/vim-wintabs'}
-- use {'terryma/vim-multiple-cursors'} -- -> strange behavior
-- use {'xolox/vim-easytags' -- -> syntax highlight use tags. can'}t use.
-- use {'bbchung/clighter'} -- -> syntax highlight use libclang.
--                                  can't load libclang.
-- use {'jeaye/color_coded'} -- -> syntax highlight use clang. can'}t build.
-- use {'gregsexton/gitv'} -- -> cohama/agit.vim
-- use {'fholgado/minibufexpl.vim'} -- -> easybuffer
-- use {'tpope/vim-unimpaired'} -- -> Raimondi/delimitMate
-- use {'godlygeek/tabular'} -- -> junegunn/vim-easy-align
-- use {'benmills/vimux'} -- -> move tmux and type command
-- use {'nathanaelkane/vim-indent-guides'} -- -> Yggdroot/indentLine
-- use {'bling/vim-airline'} -- -> itchyny/lightline.vim
-- use {'justinmk/vim-sneak'} -- -> easymotion
-- use {'t9md/vim-smalls'} -- -> easymotion
-- use {'taglist.vim'} -- -> tagbar
-- use {'wesleyche/SrcExpl'} -- include many bugs -> autopreview
-- use {'Trinity'} -- -> tagbar, nerdtree, autopreview
-- use {'thinca/vim-openbuf'} -- -> easybuffer
-- use {'sjl/gundo.vim'} -- -> undotree
-- use {'thinca/vim-localrc'} -- -> embear/vim-localvimrc
-- use {'tpope/vim-commentary'} -- -> The-NERD-Commenter
-- use {'tomtom/tcomment_vim'} -- -> The-NERD-Commenter
-- use {'tyru/caw.vim'} -- -> The-NERD-Commenter
-- use {'Rip-Rip/clang_complete'} -- -> vim-clang
-- use {'Valloric/YouCompleteMe'} -- -> vim-clang
-- use {'L9'} -- -> dependent on FuzzyFinder
-- use {'FuzzyFinder'} -- -> unite
-- use {'ZenCoding.vim'} -- -> mattn/emmet-vim
-- use {'jelera/vim-javascript-syntax'}
-- use {'YankRing.vim'} -- -> LeafCage/yankround.vim
-- use {'AutoComplPop'} -- neocomplcache
-- use {'ref.vim'} -- Out of index range error.
-- use {'motemen/hatena-vim'}
-- use {'mattn/unite-advent_calendar'}
-- use {'Townk/vim-autoclose'} -- Esc and interference during completion -> Raimondi/delimitMate
